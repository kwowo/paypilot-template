// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Better Auth Schema
model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified Boolean   @default(false)
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    role          UserRole  @default(USER)
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    orders        Order[]
    cartItems     CartItem[]
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(cuid())
    accountId         String
    providerId        String
    userId            String
    accessToken       String?
    refreshToken      String?
    idToken           String?
    accessTokenExpiresAt DateTime?
    refreshTokenExpiresAt DateTime?
    scope             String?
    password          String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([providerId, accountId])
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    
    @@unique([identifier, value])
}

// E-commerce Models
model Category {
    id          String    @id @default(cuid())
    name        String    @unique
    slug        String    @unique
    description String?
    image       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    products    Product[]
    
    @@index([slug])
}

model Product {
    id          String      @id @default(cuid())
    name        String
    slug        String      @unique
    description String
    price       Decimal     @db.Decimal(10, 2)
    image       String
    images      String[]
    stock       Int         @default(0)
    sizes       Size[]
    colors      Color[]
    featured    Boolean     @default(false)
    active      Boolean     @default(true)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    
    category    Category    @relation(fields: [categoryId], references: [id])
    categoryId  String
    
    cartItems   CartItem[]
    orderItems  OrderItem[]
    
    @@index([slug])
    @@index([categoryId])
    @@index([featured])
}

model CartItem {
    id        String   @id @default(cuid())
    quantity  Int      @default(1)
    size      Size
    color     Color
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    
    @@unique([userId, productId, size, color])
}

model Order {
    id              String        @id @default(cuid())
    orderNumber     String        @unique
    status          OrderStatus   @default(PENDING)
    total           Decimal       @db.Decimal(10, 2)
    subtotal        Decimal       @db.Decimal(10, 2)
    tax             Decimal       @db.Decimal(10, 2)
    shipping        Decimal       @db.Decimal(10, 2)
    
    // Shipping Address
    shippingName    String
    shippingEmail   String
    shippingPhone   String?
    shippingAddress String
    shippingCity    String
    shippingState   String
    shippingZip     String
    shippingCountry String        @default("US")
    
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    
    user            User          @relation(fields: [userId], references: [id])
    userId          String
    orderItems      OrderItem[]
    
    @@index([userId])
    @@index([status])
}

model OrderItem {
    id        String   @id @default(cuid())
    quantity  Int
    price     Decimal  @db.Decimal(10, 2)
    size      Size
    color     Color
    
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId   String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
}

// Enums
enum UserRole {
    USER
    ADMIN
}

enum Size {
    XS
    S
    M
    L
    XL
    XXL
}

enum Color {
    BLACK
    WHITE
    GRAY
    RED
    BLUE
    GREEN
    YELLOW
    PINK
    PURPLE
    ORANGE
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}
