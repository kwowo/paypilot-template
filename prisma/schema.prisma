// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// T-Shirt E-commerce Models
model Product {
    id          String      @id @default(cuid())
    name        String
    slug        String      @unique
    description String
    price       Decimal     @db.Decimal(10, 2)
    images      String[]
    category    Category    @relation(fields: [categoryId], references: [id])
    categoryId  String
    featured    Boolean     @default(false)
    active      Boolean     @default(true)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    // Relations
    variants    ProductVariant[]
    cartItems   CartItem[]
    orderItems  OrderItem[]

    @@index([slug])
    @@index([categoryId])
    @@index([featured])
}

model Category {
    id          String    @id @default(cuid())
    name        String
    slug        String    @unique
    description String?
    image       String?
    active      Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relations
    products    Product[]

    @@index([slug])
}

model ProductVariant {
    id        String    @id @default(cuid())
    productId String
    size      Size
    color     String
    inventory Int       @default(0)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    // Relations
    product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
    cartItems CartItem[]
    orderItems OrderItem[]

    @@unique([productId, size, color])
    @@index([productId])
}

model Cart {
    id        String     @id @default(cuid())
    userId    String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    // Relations
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    items     CartItem[]
}

model CartItem {
    id        String         @id @default(cuid())
    cartId    String
    productId String
    variantId String
    quantity  Int            @default(1)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    // Relations
    cart      Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
    variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([cartId, variantId])
    @@index([cartId])
}

model Order {
    id            String      @id @default(cuid())
    userId        String
    orderNumber   String      @unique
    status        OrderStatus @default(PENDING)
    totalAmount   Decimal     @db.Decimal(10, 2)
    shippingAddress String
    billingAddress  String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    // Relations
    user          User        @relation(fields: [userId], references: [id])
    items         OrderItem[]

    @@index([userId])
    @@index([orderNumber])
}

model OrderItem {
    id        String         @id @default(cuid())
    orderId   String
    productId String
    variantId String
    quantity  Int
    price     Decimal        @db.Decimal(10, 2)
    createdAt DateTime       @default(now())

    // Relations
    order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product        @relation(fields: [productId], references: [id])
    variant   ProductVariant @relation(fields: [variantId], references: [id])

    @@index([orderId])
}

enum Size {
    XS
    S
    M
    L
    XL
    XXL
}

enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

// Better Auth Schema (Extended for E-commerce)
model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified Boolean   @default(false)
    image         String?
    role          UserRole  @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    
    // Relations
    accounts      Account[]
    sessions      Session[]
    cart          Cart?
    orders        Order[]
}

enum UserRole {
    USER
    ADMIN
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(cuid())
    accountId         String
    providerId        String
    userId            String
    accessToken       String?
    refreshToken      String?
    idToken           String?
    accessTokenExpiresAt DateTime?
    refreshTokenExpiresAt DateTime?
    scope             String?
    password          String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([providerId, accountId])
}

model Verification {
    id         String   @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    
    @@unique([identifier, value])
}
